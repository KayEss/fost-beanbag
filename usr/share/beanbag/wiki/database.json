{
    "" : {
        "content" : "<p>Beanbag is a very lightweight ACID compliant transactional JSON database. The database itself is one or more JSON files and you interact with it through RESTful calls.</p>\n<p>It's all very experimental so probably best used for fun rather than profit.</p>\n<h1 id=\"using-beanbag\">Using Beanbag</h1>\n<p>There is no release yet, so you'll need to checkout the develop branch and try from there. After checking out develop re-read this file.</p>\n<h2 id=\"running-a-beanbag-server\">Running a Beanbag server</h2>\n<p>There isn't yet a simple Beanbag specific web server. The Beanbag views can be run by configuring them in the <code>fost-webserver</code> in the <code>fost-web</code> project.</p>\n<p>After doing a debug (i.e. a default) build the examples can be run from the root of the checkout using (for the wiki example):</p>\n<pre><code>bin/fost-webserver-d -p 8080 usr/share/beanbag/wiki/config-d.json </code></pre>\n<p>Or (for the raw JSON editor):</p>\n<pre><code>bin/fost-webserver-d -p 8080 usr/share/beanbag/raw/config-d.json </code></pre>\n<p>The <code>-p</code> parameter controls the port the server will appear on.</p>\n<h1 id=\"server-views\">Server views</h1>\n<p>The main purpose of the Beanbag server views is to allow different ways of mapping URL paths in the request to locations within the JSON structure at the server.</p>\n<h2 id=\"beanbag.raw\">beanbag.raw</h2>\n<p>This exposes the configured JSON data in it's entirety and unchanged. A request against the root of the view will return the entire structure, and requests against sub-paths will return the data at that location. If a path component is numeric then it will be interpreted as an array index in a JSON array.</p>\n<p>For example, a path of:</p>\n<pre><code>/path/into/1/structure/ </code></pre>\n<p>Would appear as the equivalent JavaScript location:</p>\n<pre><code>data['path']['into'][1]['structure'] </code></pre>\n<p>If you were to do a <code>PUT</code> to a location like this then Beanbag will create objects and arrays as required to fulfil the location. If the data already present won't allow for the type of index access your path implies then an error will be returned.</p>\n<h3 id=\"media-types\">Media types</h3>\n<p>Both <code>application/json</code> and <code>text/html</code> are supported. To receive an <code>application/json</code> response then:</p>\n<ol style=\"list-style-type: decimal;\">\n<li>Use <code>application/json</code> in the Accept header before <code>text/html</code>. Currently, only response codes of 2xx will return JSON. Note that this means a 404 will always return <code>text/html</code></li>\n<li>Add <code>__=</code> to the query string. This will force JSON to be produced, but it will be returned as <code>text/plain</code> to aid in debugging from a browser.</li>\n</ol>\n<h3 id=\"request-methods\">Request methods</h3>\n<p>Currently <code>GET</code>, <code>PUT</code> and <code>DELETE</code> are supported. <code>PUT</code> is used for both creation of new locations inside the JSON and for updating of current values. Conditional <code>PUT</code>s (i.e. use of <code>If-Modified</code>) can be used to ensure that data has not already been changed. Clients should use the <code>ETag</code> header for this purpose. <code>DELETE</code> can also be used conditionally to ensure that recently updated information is not deleted.</p>\n<h2 id=\"beanbag.structured\">beanbag.structured</h2>\n<p>This exposes the JSON data in a more structured format designed to be more scalable. A JSON object is always returned for all locations and the data is placed into the <code>data</code> key. For atoms and arrays the actual data itself is replaced by a JSON object that describes where it can be found.</p>\n<h1 id=\"development\">Development</h1>\n<p>This project uses git flow. Don't forget to do <code>git flow init -d</code> after you clone it.</p>\n<p>The <code>./configure</code> script is used to pull changes and source for the other libraries that are needed. This can be run each time upstream changes are wanted, but it does not attempt to update the main repository view.</p>\n<p>You can then build the software by running <code>./compile</code>.</p>\n<p>A full example sequence is below:</p>\n<pre>git clone git@github.com:KayEss/beanbag.git\ncd beanbag\ngit flow init -d\n./configure\n./compile\nbin/fost-webserver-d -p 8080 usr/share/beanbag/wiki/config-d.json\n</pre>\n<p>Opening a browser to show http://localhost:8080/ should show this text.</p>",
        "title" : "Beanbag \u2014 A lightweight JSON database \u2014 0.0"
    }
}
